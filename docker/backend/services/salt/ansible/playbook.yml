---
- hosts: localhost
  become: false

# ////////////////////////////////////////////////////////////////////////////////////////
#  VARIABLES
# ////////////////////////////////////////////////////////////////////////////////////////
  vars_files:
  - "./vars.yml"

  vars:
    compose_up: true

# ////////////////////////////////////////////////////////////////////////////////////////
#  ENVIRONMENT VARIABLES
# ////////////////////////////////////////////////////////////////////////////////////////
  environment:

    PLAYBOOK_DIR: "{{ playbook_dir }}"

    MS_NAME: "{{ microservice_name }}"
    IMAGE_REPO: "{{ image_repo }}"
    BUILD_ID: "{{ build_id }}"

    DJANGO_PORT: "{{ django_port }}"
    HOST_PORT: "{{ host_port }}"

    # DEV OR PROD /////////////////////////////////////
    MS_DEPENDENCIES: "{{ vars[dev_prod + '_dependencies'] }}"

    DJANGO_SECRET_KEY: "{{ vars[dev_prod + '_secret_key'] }}"
    DJANGO_ALLOWED_HOSTS: "{{ vars[dev_prod + '_allowed_hosts'] }}"
    DJANGO_DEBUG: "{{ vars[dev_prod + '_debug'] }}"

    DB_ENGINE: "{{ vars[dev_prod + '_engine_type'] }}"
    DB_NAME: "{{ vars[dev_prod + '_db_name'] }}"
    DB_USER: "{{ vars[dev_prod + '_db_user'] }}"
    DB_PASSWORD: "{{ vars[dev_prod + '_db_pass'] }}"
    DB_PORT: "{{ vars[dev_prod + '_db_port'] }}"
    DB_OPTIONS: "{{ vars[dev_prod + '_db_options'] }}"


# ////////////////////////////////////////////////////////////////////////////////////////
#  TASKS
# ////////////////////////////////////////////////////////////////////////////////////////
  tasks:


# ////////////////////////////////////////////////////////////////////////////////////////
#  AUTO-BUILD MICROSERVICE
# ////////////////////////////////////////////////////////////////////////////////////////

  # INIT DJANGO FILES //////////////////////////////////////////////////////////////////
    - name: INITIALIZE DJANGO FILES
      shell:
      args:
        executable: /usr/bin/bash
        cmd: bash django-init.sh
        chdir: "{{ playbook_dir }}/scripts"
      # register: deploy_cloud_cluster_results
      # when: (destroy == "false") and (provisioner == "terraform")
    # - debug:
    #     var: results.stdout
    


# ////////////////////////////////////////////////////////////////////////////////////////
# PUSH
# ////////////////////////////////////////////////////////////////////////////////////////

  # DOCKER-COMPOSE UP ///////////////////////////////////////////////////////////////////
    - name: DOCKER COMPOSE
      shell:
      args:
        executable: /usr/bin/bash
        cmd: docker-compose up -d
        chdir: "{{ playbook_dir }}/app"
    #   register: deploy_k3ai_cluster_results
      when: compose_up == true
    # - debug:
    #     var: "{{ project_dir }}_{{ module_name }}_results.stdout"

  # PUSH //////////////////////////////////////////////////////////////////////
    # - name: Deploy {{ module_name | capitalize }} Resources ({{ cluster_type }}) via {{ provisioner_type }}
    #   shell:
    #   args:
    #     executable: /usr/bin/bash
    #     cmd: "bash k3ai.sh -a deploy -n {{ owner-name }}-{{ cluster_name }}-{{ cluster_type }} -t {{ cluster_type }}"
    #     chdir: "{{ playbook_path }}/"
    #   register: deploy_k3ai_cluster_results
    #   when: (destroy == "false") and (provisioner == "scripts")
    # - debug:
    #     var: "{{ project_dir }}_{{ module_name }}_results.stdout"


 