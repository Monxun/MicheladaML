---
- hosts: localhost
  become: false

# ////////////////////////////////////////////////////////////////////////////////////////
#  VARIABLES
# ////////////////////////////////////////////////////////////////////////////////////////
  vars_files:
  - "./vars.yaml"

  # vars:
  #   # EXTRA VARS

# ////////////////////////////////////////////////////////////////////////////////////////
#  ENVIRONMENT VARIABLES
# ////////////////////////////////////////////////////////////////////////////////////////
  environment:
    MS_NAME: "{{ microservice_name }}"
    IMAGE_REPO: "{{ image_repo }}"
    BUILD_ID: "{{ build_id }}"

    DJANGO_PORT: "{{ django_port }}"
    HOST_PORT: "{{ host_port }}"

# ////////////////////////////////////////////////////////////////////////////////////////
#  TASKS
# ////////////////////////////////////////////////////////////////////////////////////////
  tasks:

# ////////////////////////////////////////////////////////////////////////////////////////
#  CREATE .ENV AND REQUIREMENTS.TXT
# ////////////////////////////////////////////////////////////////////////////////////////

  # DEPLOY //////////////////////////////////////////////////////////////////////
    - name: Run Terraform Deployment for {{ cluster_type | upper }} Resources
      shell:
      args:
        executable: /usr/bin/bash
        cmd: bash deploy.sh
        chdir: "{{ playbook_path }}/{{ cloud_provider }}/{{ module_name }}s/{{ cluster_type }}/"
      register: deploy_cloud_cluster_results
      when: (destroy == "false") and (provisioner == "terraform")
    # - debug:
    #     var: results.stdout
    

  # DESTROY //////////////////////////////////////////////////////////////////////
    - name: Destroy {{ module_name | capitalize }} Resources ({{ cluster_type }})
      shell:
      args:
        executable: /usr/bin/bash
        cmd: bash destroy.sh
        chdir: "{{ playbook_path }}/{{ cloud_provider }}/{{ module_name }}s/{{ cluster_type }}/"
      register: destroy_cloud_cluster_results
      when: (destroy == "true") and (provisioner == "terraform")
    # - debug:
    #     var: "{{ project_dir }}_{{ module_name }}_results.stdout"


# ////////////////////////////////////////////////////////////////////////////////////////
#  BUILD / PUSH / DEPLOY
# ////////////////////////////////////////////////////////////////////////////////////////

  # DEPLOY //////////////////////////////////////////////////////////////////////
    - name: Deploy {{ module_name | capitalize }} Resources ({{ cluster_type }}) via {{ provisioner_type }}
      shell:
      args:
        executable: /usr/bin/bash
        cmd: "bash k3ai.sh -a deploy -n {{ owner-name }}-{{ cluster_name }}-{{ cluster_type }} -t {{ cluster_type }}"
        chdir: "{{ playbook_path }}/"
      register: deploy_k3ai_cluster_results
      when: (destroy == "false") and (provisioner == "scripts")
    # - debug:
    #     var: "{{ project_dir }}_{{ module_name }}_results.stdout"


  # DESTROY //////////////////////////////////////////////////////////////////////
    - name: Destroy {{ module_name | capitalize }} Resources ({{ cluster_type }}) via {{ provisioner_type }}
      shell:
      args:
        executable: /usr/bin/bash
        cmd: "bash k3ai.sh -a destroy -n {{ owner-name }}-{{ cluster_name }}-{{ cluster_type }}"
        chdir: "{{ playbook_path }}/"
      register: destroy_k3ai_cluster_results
      when: (destroy == "true") and (provisioner == "scripts")
    # - debug:
    #     var: "{{ project_dir }}_{{ module_name }}_results.stdout"

    